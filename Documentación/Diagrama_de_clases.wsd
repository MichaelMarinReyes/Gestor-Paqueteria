@startuml diagrama_de_clases
package backend {
    package principal {
        class FuncionamientoPrincipal{
            - administrador: Administrador
            - operador: Operador
            - recepcionista: Recepcionista
            - cliente: Cliente
            + mostrarReportes(): void
        }
    }


    package roles {
        class Usuario {
            - int idUsuario
            - String nombre
            - String tipo
            + iniciarSesion(): void
            + cerrarSesion(): void
        }

        class Administrador {
            - Cliente cliente
            - Ruta ruta
            - Operador operador
            - double tarifaOperacionGlobal
            + crearCliente(): void
            + desactivarCliente(): void
            + crearRuta(): void
            + desactivarRuta(): void
            + modificarTarifaGlobal(): void
            + crearPuntoControl(): void
            + desactivarPuntoContol(): void
            + modificarDatosPuntoControl(): void
            + modificarCantidadPaquetesCola(): void
        }


        class Operador {
            - PuntoControl puntosControlAsignados
            + registrarTiempoPaquete(): void
        }

        class Recepcionista {
            - int id
            + registrarPaquete(): void
            + facturar(): void
            + crearCliente(): void
            + consultarPaquetesCliente(): void
        }

        class Cliente {
            - String nit
            - String nombre
            - String direccion
        }

        enum Rol {
            ADMINISTRADOR
            OPERADOR
            CLIENTE
        }

        FuncionamientoPrincipal *-- Administrador
        FuncionamientoPrincipal *-- Operador
        FuncionamientoPrincipal *-- Recepcionista
        FuncionamientoPrincipal *-- Cliente
    }

    package rutaspuntosdecontrol {
        class Paquete {
            - int id
            - double peso
            - String destino
            - Cliente cliente
            - Date tiempoEnPuntoDeControl
            + calcularPrecio(): void
        }

        class PuntoControl {
            - int id
            - String nombre
            - double tarifaOperacion
            - int capacidadCola
            - Ruta ruta
            + modificarTarifaOperacion(): void
            + modificarCapacidadCola(): void
        }

        class Ruta {
            - int id
            - String destino
            - PuntoControl puntoControl
            - boolean activa
            + agregarPuntoControl(): void
            + quitarPuntoContro(): void
        }

        class Destino {
            - nombreDestino: String
        }

        Ruta *-- Destino
    }

    Administrador "extends"-up-> Usuario
    Operador "extends"-up-> Usuario
    Recepcionista "extends"-up-> Usuario
    Ruta *-- PuntoControl
    Operador --* PuntoControl
    Recepcionista o-- Cliente
    Recepcionista o-- Paquete
    Ruta o-- Paquete
    Rol *-- Usuario

    package reportes {
        class ReporteRuta  {
            - Ruta nombreRuta
            - int cantidadPaquetes
            - boolean estadoRuta
            + mostrarPaquetesActualmenteEnRuta(): void
            + mostrarPaquetesFueraDeRuta(): void
            + mostrarEstadoDeRuta(): void
        }

        class ReporteGanancias {
            - Ruta nombreRuta
            - Date fechaInicial
            - Date fechaFinal
            - double costo
            - double ingresos
            - double ganancias
        }

        class ReporteClientes {
            - Cliente nombre
            - String nit
            - int paquetesEntregados
        }

        FuncionamientoPrincipal o-- ReporteRuta
        FuncionamientoPrincipal o-- ReporteGanancias
        FuncionamientoPrincipal o-- ReporteClientes
    }

    package dababases {
        class ConexionDB {
            - ConexionDB instancia
            - String URL_MYSQL
            - String USER
            - String PASSWORD
            + getIntancia(): ConexionDB
            + conectar(): Connection

        }

        class LoginDao {
            + verificarCredenciales(String usuario, String contrase√±a): boolean
        }

        package accionesadmin {
            class AdminDao{

            }

            class ClienteDao {
                + crearCliente(Cliente cliente): Cliente
                + obtenerClientes(): List
                + obtenerCliente(String nit): Cliente
                + actualizarCliente(Cliente cliente): void
                + eliminarCliente(String nit): void
            }

            class OperadorDao {
                + obtenerOperadores(): List
                + obtenerOperador(int id): Operador
                + crearOperador(Operador operador): void
                + actualizarOperador(Operador operador): Operador
                + eliminarOperador(int id): void
            }

            class PuntoDeControlDao {
                + obtenerPuntosDeControl(): List
                + obtenerPuntoDeControl(int id): PuntoDecontrol
                + crearPuntoControl(PuntoDeControl puntoDeControl): PuntoDeControl
                + actualizarPuntoContro(PuntoDeControl puntoDeControl): void
                + eliminarPuntoControl(int id): void
            }

            class RecepcionistaDao {
                + obtenerRecepcionistas(): List
                + obtenerRecepcionista(int id): Recepcionista
                + crearRecepcionista(Recepcionista recepcionista): Recepcionista
                + actualizarRecepcionista(Recepcionista recepcionista): void
                + eliminarRecepcionista(int id): void
            }
            class RutaDao {
                + obtenerRutas(): List
                + obtenerRuta(int id): Ruta
                + crearRuta(Ruta ruta): Ruta
                + actualizarRuta(Ruta rutaEntidad): void
                + eliminarRuta(int id): void
            }
        }

        package accionesoperador {

        }
    }

    package servlets {
        class AdministradorServlet {
            + doGet(HttpsServletRequest req, HttpServletResponse resp): void
            + doPost(HttpsServletRequest req, HttpServletResponse resp): void
            + doPut(HttpsServletRequest req, HttpServletResponse resp): void
            + doDelete(HttpsServletRequest req, HttpServletResponse resp): void
        }

        class ClienteServlet {
            + doGet(HttpsServletRequest req, HttpServletResponse resp): void
            + doPost(HttpsServletRequest req, HttpServletResponse resp): void
            + doPut(HttpsServletRequest req, HttpServletResponse resp): void
            + doDelete(HttpsServletRequest req, HttpServletResponse resp): void
        }
        class LoginServlet {
            + doGet(HttpsServletRequest req, HttpServletResponse resp): void
            + doPost(HttpsServletRequest req, HttpServletResponse resp): void
            + doPut(HttpsServletRequest req, HttpServletResponse resp): void
            + doDelete(HttpsServletRequest req, HttpServletResponse resp): void
        }
        class PuntoControlServlet {
            + doGet(HttpsServletRequest req, HttpServletResponse resp): void
            + doPost(HttpsServletRequest req, HttpServletResponse resp): void
            + doPut(HttpsServletRequest req, HttpServletResponse resp): void
            + doDelete(HttpsServletRequest req, HttpServletResponse resp): void
        }
        class RutaServlet {
            + doGet(HttpsServletRequest req, HttpServletResponse resp): void
            + doPost(HttpsServletRequest req, HttpServletResponse resp): void
            + doPut(HttpsServletRequest req, HttpServletResponse resp): void
            + doDelete(HttpsServletRequest req, HttpServletResponse resp): void
        }

        class LoginServlet {
            + doGet(HttpsServletRequest req, HttpServletResponse resp): void
            + doPost(HttpsServletRequest req, HttpServletResponse resp): void
            + doPut(HttpsServletRequest req, HttpServletResponse resp): void
            + doDelete(HttpsServletRequest req, HttpServletResponse resp): void
        }
    }

    package servicios {
        class ServicioAdministrador {
            - puntoDeControlDao PuntoDeControl
            - rutaDao RuaDao
            - clienteDao ClienteDao
            + obtenerPuntosDeControl(): List
            + crearPuntoControl(): PuntoDeControl
            + eliminarPuntoControl(int idPuntoControl): void
            + editarPuntoControl(PuntoDeControl puntoDeControl): void
            + crearRuta(Ruta rutaEntidad): Ruta
            + obtenerRutas(): List
            + editarRuta(Ruta rutaEntidad): void
            + eliminarRuta(int idRuta): void
            + crearCliente(Cliente cliente): Cliente
            + obtenerCliente(): List
            + editarCliente(Cliente clienteEntidad, String nit): void
            + eliminarCliente(String nit): void
        }

        class ServicioOperador {

        }
    }
    
    ClienteServlet *-- ServicioAdministrador
    PuntoControlServlet *-- ServicioAdministrador
    RutaServlet *-- ServicioAdministrador
    AdministradorServlet *-- ServicioAdministrador
    ServicioAdministrador *-- LoginDao
    ServicioAdministrador *-- ClienteDao
    ServicioAdministrador *-- PuntoDeControlDao
    ServicioAdministrador *-- RutaDao

    LoginDao *-- ConexionDB
    ClienteDao *-- ConexionDB
    PuntoDeControlDao *-- ConexionDB
    RutaDao *-- ConexionDB
    ClienteDao *-- Cliente
    PuntoDeControlDao *-- PuntoControl
    RutaDao *-- Ruta

}

